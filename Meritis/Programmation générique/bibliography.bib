
@incollection{goos_generic_1989,
	address = {Berlin, Heidelberg},
	title = {Generic programming},
	volume = {358},
	isbn = {978-3-540-51084-0 978-3-540-46153-1},
	url = {http://link.springer.com/10.1007/3-540-51084-2_2},
	urldate = {2017-03-02},
	booktitle = {Symbolic and {Algebraic} {Computation}},
	publisher = {Springer Berlin Heidelberg},
	author = {Musser, David R. and Stepanov, Alexander A.},
	editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegmüller, G. and Stoer, J. and Wirth, N. and Gianni, P.},
	year = {1989},
	doi = {10.1007/3-540-51084-2_2},
	pages = {13--25},
	file = {genprog.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/K2IQI247/genprog.pdf:application/pdf}
}

@article{mathur_generic_2011,
	title = {Generic {Programming} in {C}++ and {Java}},
	volume = {11},
	url = {http://paper.ijcsns.org/07_book/201109/20110910.pdf},
	number = {9},
	urldate = {2017-03-14},
	journal = {IJCSNS},
	author = {Mathur, Shilpa},
	year = {2011},
	pages = {60},
	file = {20110910.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/C8MM3HB9/20110910.pdf:application/pdf}
}

@phdthesis{giovannelli_programming_2013,
	type = {Bachelor of {Science}},
	title = {Programming in {Algorithms}: {Generic} {Programming} and its {Implementation}},
	shorttitle = {Programming in {Algorithms}},
	url = {http://hdl.handle.net/10066/11492},
	abstract = {The decisions which language designers make when implementing new features, and the effects which those decisions have on a finished language, is a fascinating field of study which has been largely overlooked by many programming language researchers. In this paper, we will explore the implementation of generic programming, a powerful programming technique, in four modern programming languages (C++, C\#, Java, and Haskell). We discuss the process of designing each implementation and how those design choices affect their use in each language. In doing so, we build a coherent theory of trade-offs in language design and how those trade-offs can be minimized.},
	urldate = {2017-03-14},
	school = {Haverford College. Sept. of Computer Science},
	author = {Giovannelli, Daniel},
	year = {2013},
	file = {2013GiovannelliD_thesis.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/IXKDN5EE/2013GiovannelliD_thesis.pdf:application/pdf}
}

@article{dos_reis_what_2005,
	title = {What is {Generic} {Programming}?},
	url = {https://cgi5.cs.rpi.edu/research/pdf/06-12.pdf#page=7},
	urldate = {2017-03-02},
	journal = {Library-Centric Software Design (LCSD’05)},
	author = {Dos Reis, Gabriel and Järvi, Jaakko},
	year = {2005},
	pages = {1--10},
	file = {dos_reis_et_al.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/PZTJ7QCQ/dos_reis_et_al.pdf:application/pdf}
}

@incollection{becker_formalizing_2009,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Formalizing {Linguistic} {Conventions} for {Conceptual} {Models}},
	copyright = {©2009 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-04839-5 978-3-642-04840-1},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-04840-1_8},
	abstract = {A precondition for the appropriate analysis of conceptual models is not only their syntactic correctness but also their semantic comparability. Assuring comparability is challenging especially when models are developed by different persons. Empirical studies show that such models can vary heavily, especially in model element naming, even if they express the same issue. In contrast to most ontology-driven approaches proposing the resolution of these differences ex-post, we introduce an approach that avoids naming differences in conceptual models already during modeling. Therefore we formalize naming conventions combining domain thesauri and phrase structures based on a lin-guistic grammar. This allows for guiding modelers automatically during the modeling process using standardized labels for model elements. Our approach is generic, making it applicable for any modeling language.},
	language = {en},
	number = {5829},
	urldate = {2015-02-06},
	booktitle = {Conceptual {Modeling} - {ER} 2009},
	publisher = {Springer Berlin Heidelberg},
	author = {Becker, Jörg and Delfmann, Patrick and Herwig, Sebastian and Lis, Łukasz and Stein, Armin},
	editor = {Laender, Alberto H. F. and Castano, Silvana and Dayal, Umeshwar and Casati, Fabio and Oliveira, José Palazzo M. de},
	year = {2009},
	keywords = {Data Structures, Linguistics, Models and Principles, Naming Conventions, Programming Languages, Compilers, Interpreters, Programming Techniques, Software Engineering/Programming and Operating Systems, conceptual modeling, software engineering},
	pages = {70--83},
	file = {2326.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/KW5XKR2H/2326.pdf:application/pdf}
}

@book{bloch_effective_2008,
	address = {Upper Saddle River, NJ},
	edition = {2nd ed},
	series = {The {Java} series},
	title = {Effective {Java}},
	isbn = {978-0-321-35668-0},
	publisher = {Addison-Wesley},
	author = {Bloch, Joshua},
	year = {2008},
	keywords = {Java (Computer program language)},
	annote = {Introduction -- Creating and destroying objects -- Methods common to all objects -- Classes and interfaces -- Generics -- Enums and annotations -- Methods -- General programming -- Exceptions -- Concurrency -- Serialization},
	annote = {"Revised and updated for Java SE 6"--Cover},
	file = {Effective_Java_2nd_Edition.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/EAE7DB6F/Effective_Java_2nd_Edition.pdf:application/pdf}
}

@article{cardelli_understanding_1985,
	title = {On understanding types, data abstraction, and polymorphism},
	volume = {17},
	issn = {03600300},
	url = {http://portal.acm.org/citation.cfm?doid=6041.6042},
	doi = {10.1145/6041.6042},
	abstract = {Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages.},
	language = {en},
	number = {4},
	urldate = {2019-10-26},
	journal = {ACM Computing Surveys},
	author = {Cardelli, Luca and Wegner, Peter},
	month = dec,
	year = {1985},
	pages = {471--523},
	file = {Cardelli et Wegner - 1985 - On understanding types, data abstraction, and poly.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/DDUMWK83/Cardelli et Wegner - 1985 - On understanding types, data abstraction, and poly.pdf:application/pdf}
}

@misc{lo_russo_stlport:_1997,
	title = {{STLport}: {An} {Interview} with {A}. {Stepanov}},
	url = {http://www.stlport.org/resources/StepanovUSA.html},
	urldate = {2019-10-29},
	author = {Lo Russo, Graziano},
	year = {1997},
	note = {version originale en Italien}
}

@article{goguen_parameterized_1984,
	title = {Parameterized {Programming}},
	volume = {SE-10},
	issn = {0098-5589},
	url = {http://ieeexplore.ieee.org/document/5010277/},
	doi = {10.1109/TSE.1984.5010277},
	number = {5},
	urldate = {2019-11-17},
	journal = {IEEE Transactions on Software Engineering},
	author = {Goguen, Joseph A.},
	month = sep,
	year = {1984},
	pages = {528--543},
	file = {Goguen - 1984 - Parameterized Programming.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/QCTJ3FSP/Goguen - 1984 - Parameterized Programming.pdf:application/pdf}
}

@inproceedings{musser_library_1987,
	address = {Boston, Massachusetts, United States},
	title = {A library of generic algorithms in {Ada}},
	isbn = {978-0-89791-243-3},
	url = {http://portal.acm.org/citation.cfm?doid=317500.317529},
	doi = {10.1145/317500.317529},
	language = {en},
	urldate = {2019-11-17},
	booktitle = {Proceedings of the 1987 annual {ACM} {SIGAda} international conference on {Ada}  - {SIGAda} '87},
	publisher = {ACM Press},
	author = {Musser, David R. and Stepanov, Alexander A.},
	year = {1987},
	pages = {216--225},
	file = {Musser et Stepanov - 1987 - A library of generic algorithms in Ada.pdf:/home/matthieu/.mozilla/firefox/4af5brip.default/zotero/storage/J5ALDELK/Musser et Stepanov - 1987 - A library of generic algorithms in Ada.pdf:application/pdf}
}